@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using Tester.Shared.DTOs
@using Tester.Shared.DTOs.AuthDTOs

<div class="d-flex justify-content-center align-items-center min-vh-100">
    <div class="card shadow p-4" style="width: 100%; max-width: 400px;">
        <h3 class="card-title text-center mb-4">Реєстрація</h3>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="loginInput" class="form-label">Логін</label>
                <InputText id="loginInput" class="form-control" @bind-Value="RegisterModel.Login" />
            </div>

            <div class="mb-3">
                <label for="passwordInput" class="form-label">Пароль</label>
                <InputText id="passwordInput" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
            </div>

            <div class="mb-3">
                <label for="fullNameInput" class="form-label">ПІБ</label>
                <InputText id="fullNameInput" class="form-control" @bind-Value="RegisterModel.FullName" />
            </div>

            <div class="d-grid gap-2">
                <button class="btn btn-primary" type="submit">Зареєструватися</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private RegisterRequest RegisterModel = new()
    {
            Login = string.Empty,   
            Password = string.Empty,
            FullName = string.Empty 
    };

    private string? ErrorMessage;

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", RegisterModel);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var apiResp = await response.Content.ReadFromJsonAsync<ApiResponse>();
                ErrorMessage = string.Join("; ", apiResp?.ErrorMessages ?? new List<string> { "Registration failed." });
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}
