@page "/admin/tests"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json
@using System.Text.Json
@using Tester.Shared.DTOs
@using Tester.Shared.DTOs.TestDTOs

<PageTitle>Управління Тестами</PageTitle>

<div class="test-management-container container mt-4">
    <h2 class="mb-4 text-center section-title">
        <i class="bi bi-patch-question-fill section-icon"></i> Управління Тестами
    </h2>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger fade show custom-alert" role="alert">
            <i class="bi bi-exclamation-triangle-fill alert-icon"></i> @ErrorMessage
            <button type="button" class="btn-close" @onclick="ClearErrorMessage" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white card-header-custom">
            <h4 class="mb-0">Список Тестів</h4>
        </div>
        <div class="card-body p-0">
            @if (Tests is null)
            {
                <div class="loading-panel p-4 text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Завантаження...</span>
                    </div>
                    <p class="mt-2"><em>Завантаження тестів...</em></p>
                </div>
            }
            else if (!Tests.Any())
            {
                <div class="p-4 text-center text-muted">
                    <p class="mb-0">Наразі немає створених тестів. Створіть перший тест!</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th scope="col">Назва Тесту</th>
                                <th scope="col">Опис</th>
                                <th scope="col" class="text-center">Дії</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var test in Tests)
                            {
                                <tr class="table-row-hover">
                                    <td class="align-middle">
                                        <a href="@($"/tests/{test.TestId}/questions")" class="test-title-link">
                                            @test.TestTitle
                                        </a>
                                    </td>
                                    <td class="align-middle">@test.TestDescription</td>
                                    <td class="text-center align-middle">
                                        <button class="btn btn-info btn-sm me-2 action-btn" @onclick="() => EditTest(test.TestId)" title="Редагувати">
                                            <i class="bi bi-pencil"></i> <span class="d-none d-md-inline">Редагувати</span>
                                        </button>
                                        <button class="btn btn-danger btn-sm action-btn" @onclick="() => DeleteTest(test.TestId)" title="Видалити">
                                            <i class="bi bi-trash"></i> <span class="d-none d-md-inline">Видалити</span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="card shadow-sm mt-5">
        <div class="card-header bg-success text-white card-header-custom">
            <h4 class="mb-0">@(EditingTestId == null ? "Створити Новий Тест" : "Редагувати Тест")</h4>
        </div>
        <div class="card-body">
            <EditForm Model="CurrentTest" OnValidSubmit="HandleValidSubmit" FormName="testForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-warning" />

                <div class="mb-3">
                    <label for="testTitle" class="form-label">Назва Тесту:</label>
                    <InputText id="testTitle" class="form-control form-control-lg" @bind-Value="CurrentTest.TestTitle" placeholder="Введіть назву тесту" />
                    <ValidationMessage For="@(() => CurrentTest.TestTitle)" />
                </div>

                <div class="mb-3">
                    <label for="testDescription" class="form-label">Опис Тесту:</label>
                    <InputTextArea id="testDescription" class="form-control" @bind-Value="CurrentTest.TestDescription" rows="3" placeholder="Введіть опис тесту" />
                    <ValidationMessage For="@(() => CurrentTest.TestDescription)" />
                </div>

                <div class="d-flex justify-content-end">
                    @if (EditingTestId != null)
                    {
                        <button type="button" class="btn btn-secondary me-2 cancel-btn" @onclick="CancelEdit">
                            <i class="bi bi-x-circle"></i> Скасувати
                        </button>
                    }
                    <button type="submit" class="btn btn-success submit-btn">
                        <i class="bi @(EditingTestId == null ? "bi-plus-circle" : "bi-save")"></i> @(EditingTestId == null ? "Створити" : "Оновити")
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<TestResponse>? Tests;
    private TestRequest CurrentTest = new();
    private int? EditingTestId = null;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestsAsync();
    }

    private async Task LoadTestsAsync()
    {
        ErrorMessage = null;
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>("api/tests");
            if (response?.IsSuccess == true)
            {
                var json = ((JsonElement)response.Result!).GetRawText();
                Tests = JsonSerializer.Deserialize<List<TestResponse>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                ErrorMessage = string.Join("; ", response?.ErrorMessages ?? new List<string> { "Невідома помилка під час завантаження тестів." });
            }
        }
        catch (HttpRequestException httpEx)
        {
            ErrorMessage = $"Помилка підключення до сервера: {httpEx.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = "Не вдалося завантажити тести: " + ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        try
        {
            HttpResponseMessage response;
            if (EditingTestId == null)
            {
                response = await Http.PostAsJsonAsync("api/tests", CurrentTest);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"api/tests/{EditingTestId}", CurrentTest);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadTestsAsync();
                CurrentTest = new();
                EditingTestId = null;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<ApiResponse>(errorContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    ErrorMessage = string.Join("; ", apiResponse?.ErrorMessages ?? new List<string> { $"Помилка: {response.StatusCode}. Невідома причина." });
                }
                catch (JsonException)
                {
                    ErrorMessage = $"Помилка: {response.StatusCode}. Деталі: {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Не вдалося зберегти тест: " + ex.Message;
        }
    }

    private async Task EditTest(int id)
    {
        ErrorMessage = null;
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>($"api/tests/{id}");
            if (response?.IsSuccess == true)
            {
                var json = ((JsonElement)response.Result!).GetRawText();
                var test = JsonSerializer.Deserialize<TestResponse>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (test != null)
                {
                    CurrentTest = new TestRequest
                        {
                            TestTitle = test.TestTitle,
                            TestDescription = test.TestDescription
                        };
                    EditingTestId = test.TestId;
                }
            }
            else
            {
                ErrorMessage = "Не вдалося завантажити тест для редагування: " + string.Join("; ", response?.ErrorMessages ?? new List<string>());
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Помилка завантаження тесту: " + ex.Message;
        }
    }

    private async Task DeleteTest(int id)
    {
        ErrorMessage = null;
        if (!await Confirm($"Ви впевнені, що хочете видалити Тест #{id}?")) return;

        try
        {
            var response = await Http.DeleteAsync($"api/tests/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTestsAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<ApiResponse>(errorContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    ErrorMessage = string.Join("; ", apiResponse?.ErrorMessages ?? new List<string> { $"Помилка видалення: {response.StatusCode}. Невідома причина." });
                }
                catch (JsonException)
                {
                    ErrorMessage = $"Помилка видалення: {response.StatusCode}. Деталі: {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Не вдалося видалити тест: " + ex.Message;
        }
    }

    private void CancelEdit()
    {
        EditingTestId = null;
        CurrentTest = new();
        ErrorMessage = null;
    }

    private void ClearErrorMessage()
    {
        ErrorMessage = null;
    }

    private async Task<bool> Confirm(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }
}
