@page "/tests"
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text.Json
@using Tester.Shared.DTOs
@using Tester.Shared.DTOs.TestDTOs

<h2>Tests Management</h2>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@if (Tests is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var test in Tests)
            {
                <tr>
                    <td>
                        <a href="@($"/tests/{test.TestId}/questions")">@test.TestTitle</a>
                    </td>
                    <td>@test.TestDescription</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditTest(test.TestId)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTest(test.TestId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h3>@(EditingTestId == null ? "Create New Test" : "Edit Test")</h3>
<EditForm Model="CurrentTest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Title:</label>
        <InputText class="form-control" @bind-Value="CurrentTest.TestTitle" />
    </div>

    <div class="mb-3">
        <label>Description:</label>
        <InputText class="form-control" @bind-Value="CurrentTest.TestDescription" />
    </div>

    <button type="submit" class="btn btn-success">
        @(EditingTestId == null ? "Create" : "Update")
    </button>
    @if (EditingTestId != null)
    {
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    }
</EditForm>

@code {
    private List<TestResponse>? Tests;
    private TestRequest CurrentTest = new();
    private int? EditingTestId = null;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestsAsync();
    }

    private async Task LoadTestsAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>("api/tests");
            if (response?.IsSuccess == true)
            {
                var json = ((JsonElement)response.Result).GetRawText();
                Tests = JsonSerializer.Deserialize<List<TestResponse>>(json);
            }
            else
            {
                ErrorMessage = string.Join("; ", response?.ErrorMessages ?? new List<string> { "Unknown error" });
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to load tests: " + ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (EditingTestId == null)
            {
                var response = await Http.PostAsJsonAsync("api/tests", CurrentTest);
                if (response.IsSuccessStatusCode)
                {
                    await LoadTestsAsync();
                    CurrentTest = new();
                }
                else
                {
                    ErrorMessage = $"Error: {response.StatusCode}";
                }
            }
            else
            {
                var response = await Http.PutAsJsonAsync($"api/tests/{EditingTestId}", CurrentTest);
                if (response.IsSuccessStatusCode)
                {
                    await LoadTestsAsync();
                    CurrentTest = new();
                    EditingTestId = null;
                }
                else
                {
                    ErrorMessage = $"Error: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to save test: " + ex.Message;
        }
    }

    private async Task EditTest(int id)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>($"api/tests/{id}");
            if (response?.IsSuccess == true)
            {
                var json = ((JsonElement)response.Result).GetRawText();
                var test = JsonSerializer.Deserialize<TestResponse>(json);
                if (test != null)
                {
                    CurrentTest = new TestRequest
                        {
                            TestTitle = test.TestTitle,
                            TestDescription = test.TestDescription
                        };
                    EditingTestId = test.TestId;
                }
            }
            else
            {
                ErrorMessage = "Failed to load test: " + string.Join("; ", response?.ErrorMessages ?? new List<string>());
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error loading test: " + ex.Message;
        }
    }

    private async Task DeleteTest(int id)
    {
        if (!await Confirm($"Are you sure you want to delete Test #{id}?")) return;

        try
        {
            var response = await Http.DeleteAsync($"api/tests/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTestsAsync();
            }
            else
            {
                ErrorMessage = $"Failed to delete. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to delete test: " + ex.Message;
        }
    }

    private void CancelEdit()
    {
        EditingTestId = null;
        CurrentTest = new();
    }

    private async Task<bool> Confirm(string message)
    {
        return await Task.FromResult(confirm(message));
    }

    [JSInvokable]
    public static bool confirm(string message) => true;
}
