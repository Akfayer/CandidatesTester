@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.JSInterop
@inject IJSRuntime JS
@using System.Net.Http.Json
@using System.Text.Json
@using Tester.Shared.DTOs
@using Tester.Shared.DTOs.AuthDTOs
@inject Auth.AuthService AuthService


<div class="d-flex justify-content-center align-items-center min-vh-100">
    <div class="card shadow p-4" style="width: 100%; max-width: 400px;">
        <h3 class="card-title text-center mb-4">Login</h3>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="loginInput" class="form-label">Login</label>
                <InputText id="loginInput" class="form-control" @bind-Value="LoginModel.Login" />
            </div>

            <div class="mb-3">
                <label for="passwordInput" class="form-label">Password</label>
                <InputText id="passwordInput" type="password" class="form-control" @bind-Value="LoginModel.Password" />
            </div>

            <div class="d-grid gap-2">
                <button class="btn btn-primary" type="submit">Login</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private LoginRequest LoginModel = new()
    {
        Login = string.Empty,
        Password = string.Empty
    };
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", LoginModel);

            if (response.IsSuccessStatusCode)
            {
                var apiResp = await response.Content.ReadFromJsonAsync<ApiResponse>();
                var json = ((JsonElement)apiResp.Result).GetRawText();
                var auth = JsonSerializer.Deserialize<AuthResponse>(json);

                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", auth.Token);
                await JS.InvokeVoidAsync("localStorage.setItem", "userRole", auth.Role);
                await JS.InvokeVoidAsync("localStorage.setItem", "userName", auth.FullName);
                await JS.InvokeVoidAsync("localStorage.setItem", "userId", auth.UserId);
                AuthService.NotifyAuthenticationChanged();

                Navigation.NavigateTo("/");
            }
            else
            {
                var apiResp = await response.Content.ReadFromJsonAsync<ApiResponse>();
                ErrorMessage = string.Join("; ", apiResp?.ErrorMessages ?? new List<string> { "Login failed." });
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}
